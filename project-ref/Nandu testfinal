<!DOCTYPE html>
<html>
<head>
	<title>Project 1 - sample code 2</title>
	<script type="text/javascript" src="https://d3js.org//d3.v3.min.js"></script>
	<script src="//d3js.org/d3.v4.js"></script>
	<style>
    	text { 
			font-family: Arial; 
			font-size: 15px;
		}
		.axis path, .axis line {
			fill: none;
			stroke: black;
			shape-rendering: crispEdges;
		}
		.tick text {
			fill: black;
			font-size: 11px;
		}

		rect {
			stroke: white;
		}
	</style>
</head>
<body>
<div class="row">
	  <h3>&nbsp Dr. John Snow's Map of London's 1854 cholera epidemic &nbsp&nbsp&nbsp&nbsp&nbsp <a href=documentation.html>Documentation</h3>
</div>

<div class="container-fluid">
  

  <div class="row">
	<div class="col-lg-8" id="main_panel">
	</div>
  </div>
</div>
	

	
	<script>
	
	//ZOOM
/*	function zoomed() {
    svgContainer.attr("transform",
        "translate(" + zoom.translate() + ")" +
        "scale(" + zoom.scale() + ")"
    );
	var zoom = d3.behavior.zoom().scaleExtent([1, 10]).on("zoom", zoomed); */
	 var	margin = {top: 30, right: 20, bottom: 30, left: 50},
	w1 = 370 - margin.left - margin.right,
	h1 = 300 - margin.top - margin.bottom;

var margin1 = {top: 80, right: 80, bottom: 80, left: 80},
    w2 = 450 - margin1.left - margin1.right,
    h2 = 400 - margin1.top - margin1.bottom;
	var width = 1000
	var height = 600
	var streets=[];
      var svgContainer = d3.select("#main_panel")
      .append("svg")
      .attr("width", width)
      .attr("height", height)//.style("border", "0.5px solid #C0C0C0")
      .attr("x", "20px")
      .attr("y", "20px")
	//  .call(zoom)
     // .call(d3.zoom().on("zoom", function() {svgContainer.attr("transform", d3.event.transform)}))
      .append("g");
	
	//To draw street map  
	
	d3.json('data/streets.json',function(error, streets) {
				streets.forEach(function(data){
					
					var lineCoords=d3.svg.line()
					.x(function(d) {return d.x*30;})
					.y(function(d) {return height-d.y*30;})
					.interpolate("linear"); 
					
			lineCoords(data);
	 // set projection
	
    //var projection = d3.geoMercator().scale(1200).center([ 20, 8.5 ])

    // set projection parameters
    //projection.scale(1200).center([ 20, 8.5 ])
	// create path variable
    //var geoPath = d3.geoPath().projection(projection);
			
	
			var svgPath = svgContainer
				//.attr("d", geoPath(lineCoords)).style("stroke", "#1c9099").attr("vector-effect", "non-scaling-stroke")
				//.attr("x", "-20px")
				//.attr("y", "20px")
				.append("path")
				.attr('stroke', 'grey')
    			.attr('stroke-width', '3px')
				.attr("stroke-opacity",0.8)
				.attr("fill", "none");
			svgPath.attr("d", lineCoords(data));
			
			});
		});
		
	//To insert pumps
	var g = d3.select('svgContainer').select('g');
	
	d3.csv('data/pumps.csv',function(error, pumps) {
	
					
				   svgContainer.selectAll("circle")
					.data(pumps)
					.enter().append("circle")
					.attr("cx", function(d) { return d.x*30; })
					.attr("cy", function(d) { return height-d.y*30; })
					//var svgpump = svgContainer
					//.append('circle')
					.style('fill', 'red')
					.attr('r', 7)
					.attr("stroke", 'grey')
					.attr("stroke-opacity",0.8);
				//svgpump.attr("d", pumpcoords(data))
					//.attr('cx', function(d) {return d.x*30; })
					//.attr('cx', function(d) {return height-d.y*30; });
					});
					
	//To insert victims
	
	var g = d3.select('svgContainer').select('g');
	
	d3.csv('data/deaths_age_sex.csv',function(error, victims) {
	
					
				   svgContainer.selectAll("rect")
					.data(victims)
					.enter()
					.append("rect")
					.attr("x", function(d) { return d.x*30; })
					.attr("y", function(d) { return height-d.y*30; })
					//var svgpump = svgContainer
					//.append('circle')
					.attr('width', 5)
					.attr('height',7)
					.style('fill', function(d)
					  {
						if(d.gender == "0")
						{return "blue";}
						else
						{return "lime";}
					  }
					)
					//.style('fill', 'green')
					//.attr('r', 10)
					.attr("stroke", 'steelblue')
					.attr("stroke-opacity",0.8);
				//svgpump.attr("d", pumpcoords(data))
					//.attr('cx', function(d) {return d.x*30; })
					//.attr('cx', function(d) {return height-d.y*30; });
					});
					
	//Bar Chart to plot death days
	
		
		var CHART_WIDTH = 500;
		var CHART_HEIGHT = 300;
		var BAR_WIDTH = 10;
		var MAX_BAR_HEIGHT = 200;
		var no_of_deaths = [];
		
	/*	function drawLineChart() 
		{
			var maxValue = d3.max(no_of_deaths);
			
			var xScale = d3.scale.linear();
			var yScale = d3.scale.linear();

			xScale.domain([0, 42]).range([0, CHART_WIDTH]);
			
			yScale.domain([100,0]).range([0, CHART_HEIGHT]);
		
			var pathGenerator = d3.svg.line()
				.x(function(d) { return xScale(d.date); })
				.y(function(d) { return yScale(d.deaths);})

			var g = d3.select('svgContainer').select('g');
			
			var xAxis = d3.svg.axis()
    			.scale(xScale)
    			.orient('bottom')
    			.tickFormat(function(d) { return "" + d; })

    		var yAxis = d3.svg.axis()
    			.scale(yScale)
    			.orient('left');


    		g.append('g')
    			.attr('class', 'axis')
    			.attr('transform', 'translate(0,' + CHART_HEIGHT + ')')
    			.call(xAxis);

    		g.append('g')
    			.attr('class', 'axis')
    			.call(yAxis);

    		g.append('path')
    			.style('fill', 'none')
    			.style('stroke', 'steelblue')
    			.style('stroke-width', '3px')
    			.attr('d', pathGenerator(no_of_deaths));


		} */
		
	//Plot death days
// Parse the date / time
var	parseDate = d3.time.format("%d-%b").parse;
var formatTime = d3.time.format("%e %B");

// Set the ranges
var	x = d3.time.scale().range([0, CHART_WIDTH]);
var	y = d3.scale.linear().range([CHART_HEIGHT, 0]);

// Define the axes
var	xAxis = d3.svg.axis().scale(x)
	.orient("bottom").ticks(5);

var	yAxis = d3.svg.axis().scale(y)
	.orient("left").ticks(5);

// Define the line
//var	valueline = d3.svg.line()
//	.x(function(d) { return x(d.date); })
//	.y(function(d) { return y(d.death); });
	
	var g = d3.select('svgContainer').select('g');
	
			d3.csv('data/deathdays.csv', function(deathdays) 
			{
				deathdays.forEach(function(data){
			
				var valueline=d3.svg.line()
				//d.date = parseDate(d.date);
				//d.death = +d.death;
				.x(function(d) { return x(parseDate(d.date)); })
				.y(function(d) { return y(d.death); });
				.interpolate("linear"); 
				
				valueline(data);
				
				//x.domain(d3.extent(deathdays, function(d) {return d.date;}));
				//y.domain([0, d3.max(deathdays, function(d) {return d.death;})]);
				
		svgContainer.append("path")
					.attr("class", "line")
					.attr("d", valueline(data))
					.attr("stroke", "grey")
					.attr("stroke-width", "2px");
					//attr("d", lineCoords(data));
		})
		});
	/*	svgContainer.selectAll("dot")
					.data(deathdays)     
					.enter()
					.append("ellipse")
					.attr("cx", function(d) { return x(d.date); })     
					.attr("cy", function(d) { return y(d.death); })
					.attr("rx", 3.5) 
					.attr("ry", 3.5)
					.style("fill", "white") 
					.attr("stroke", 'steelblue')
         
			});	*/
			
		/*	for (var i=0; i<data.length; i++)
			{
				var record = data[i];
				
				// loop through all years, from 19-Aug to 29-Sept
				for (var y=19-Aug; y<=29-Sept; y++) 
				{
					var value = record[y];
					var object = {
						date: y,
						deaths: +value
					};

					no_of_deaths.push(object);
				}
			}
			drawLineChart();

		});  */
		
		
		/*function drawBarChart() 
		{
			

			//var maxValue = d3.max(energyProduction);
			var pathGenerator = d3.svg.line()
				.x(function(d) {return xScale(d["x"]);})     								
				.y(function(d) {return yScale(d["y"]);});

		
		var g = d3.select('svgContainer').select('g');
	
	d3.csv('data/deathdays.csv',function(error, deathdays) {
	
			for(var i=0;i<deathdays.length;i++)   // loop to call the path generator multiple times for different sets of the array.
				{
				g.append('path')
    			 .style('fill', 'none')
    			 .style('stroke', 'steelblue')
    			 .style('stroke-width', '2px')
    			 .attr('d', pathGenerator(deathdays[i]));
				   
				}
				});
				
		}
		drawBarChart(); */
		
				/*svgContainer.selectAll("rect")
					.data(deathdays)
					.enter()
					.append("rect")
					.attr("x", function(d) { return d.date; })
					.attr("y", function(d) { return height-d.deaths; })	*/
					
	/*d3.csv('data/pumps.csv',function(error, pumps) {
				pumps.forEach(function(data){
				
					var  pumpcoords=d3.svg.line()
					.x(function(d) {return d.x*30;})
					.y(function(d) {return height-d.y*30;});
					
				pumpcoords(data);
				
				var svgpump = svgContainer
					.append('circle')
					.style('fill', 'red')
					.attr('r', 10)
				svgpump.attr("d", pumpcoords(data));	
				
				});
		}); */
	/*d3.csv('data/pumps.csv',function(error, pump) {	
		var pumpcoords = {
		type : "MultiPoint",
		coordinates : []
	}

	for (i = 0; i < pump.length; i++) {

		pumpcoords.coordinates.push(pump[i]);

  }
  markPumps(pumpcoords);
  });
  
  function markPumps(pumpcoords) {

	// set projection
	var projection = d3.geoMercator();

	// set projection parameters
	projection.scale(1200).center([ 20,8.5])

	// create path variable
	var geoPath = d3.geoPath().projection(projection).pointRadius(10);

  svgContainer.append("path")
      //.attr("d", geoPath(pumpcoords))
	  .attr("d",pumpcoords(pump))
      .attr("fill", "red")
      .call(d3.zoom().on("zoom", function() {svgContainer.attr("transform", d3.event.transform)}))
	  .append("g")
	
}*/
/*	//To insert pumps	
	var pumps =[];
	d3.csv('data/pumps.csv',function(data) {
	//pumps.data(function(data){
		for (var i=0; i< data.length; i++)
			{
				var record = data[i];
				
				// loop through all values, from 0 to 20
				for (var j=0; j<=20; j++) 
				{
					var value = record[j];
					var object = {
					
						x: d.x*30,
						y: height-d.y*30 //+value
					};
				pumps.push(object);
					//var pumpCoords = d3.svg.circle()
					//.x(function(d) {return d.x*30;})
					//.y(function(d) {return height-d.y*30;})
					//.interpolate("circular"); 
				};
			//data = [].concat.apply([], data);
			//console.log(data.length);   
			//var len = data.length;
			
				var svgCircle = svgContainer
				.append("circle")
				.attr('stroke', 'steelblue')
    			.attr('stroke-width', '3px')
				.attr("fill", "none");
			svgCircle.attr("d", object(data));
					//pumpCoords(data);
			}
				drawScatterPlot();
			});
		//});
	function drawScatterPlot() 
		{	
			var maxValue = d3.max(pumps);
			
			var g = d3.select('svg').select('g');
	
			g.selectAll('circle')
    			.data(pumps)
    			.enter()
    			.append('circle')
    			.style('fill', 'black')
    			.attr('r', 5)
    			.attr('cx', function(d) { return d.x})
    			.attr('cy', function(d) { return d.y});
			
		} */
		
		
</script>
				
</body>
</html>