<!DOCTYPE html>
<html>
<head>
	<title>Project 1 - sample code 2</title>
	<script type="text/javascript" src="https://d3js.org//d3.v3.min.js"></script>
	<script src="//d3js.org/d3.v4.js"></script>
	<style>
    	text { 
			font-family: Arial; 
			font-size: 15px;
		}
		.axis path, .axis line {
			fill: none;
			stroke: black;
			shape-rendering: crispEdges;
		}
		.tick text {
			fill: black;
			font-size: 11px;
		}

		rect {
			stroke: white;
		}
	</style>
</head>
<body>
<div class="row">
	  <h3>&nbsp Dr. John Snow's Map of London's 1854 cholera epidemic &nbsp&nbsp&nbsp&nbsp&nbsp <a href=documentation.html>Documentation<html></html></h3>
  </div>
<class="container-fluid">
  

  <div class="row">
	<div class="col-lg-8" id="main_panel">
	</div>
  </div>
</div>
	

	
	<script>
	var width = 600
	var height = 600
	var streets=[];
	
      var svgContainer = d3.select("#main_panel")
      .append("svg")
      .attr("width", width)
      .attr("height", height)//.style("border", "0.5px solid #C0C0C0")
      .attr("x", "20px")
      .attr("y", "20px")
      //.call(d3.zoom().on("zoom", function() {svgContainer.attr("transform", d3.event.transform)}))
      .append("g");
	
	
	
		
		//Plot death days


var CHART_WIDTH = 500;
		var CHART_HEIGHT = 300;
		var BAR_WIDTH = 10;
		var MAX_BAR_HEIGHT = 200;
		var no_of_deaths = [];
		
// Parse the date / time
var	parseDate = d3.time.format("%d-%b").parse;
var formatTime = d3.time.format("%e %B");

// Set the ranges
var	x = d3.time.scale().range([0, CHART_WIDTH]);
var	y = d3.scale.linear().range([CHART_HEIGHT, 0]);

// Define the axes
var	xAxis = d3.svg.axis().scale(x)
	.orient("bottom").ticks(5);

var	yAxis = d3.svg.axis().scale(y)
	.orient("left").ticks(5);
		
var g = d3.select('svgContainer').select('g');
	
			d3.csv('data/deathdays.csv', function(deathdays) 
			{
				deathdays.forEach(function(data){
			
				var valueline=d3.svg.line()
				//d.date = parseDate(d.date);
				//d.death = +d.death;
				.x(function(d) { return x(parseDate(d.date)); })
				.y(function(d) { return y(d.death); })
				.interpolate("linear"); 
				
				valueline(data);
				
				//x.domain(d3.extent(deathdays, function(d) {return d.date;}));
				//y.domain([0, d3.max(deathdays, function(d) {return d.death;})]);
				
		svgContainer.append("path")
					.attr("class", "line")
					.attr("d", valueline(data))
					.attr("stroke", "grey")
					.attr("stroke-width", "2px");
					//attr("d", lineCoords(data));
		})
		});
					
		
	/*	svgContainer.selectAll("dot")
					.data(deathdays)     
					.enter()
					.append("ellipse")
					.attr("cx", function(d) { return x(d.date); })     
					.attr("cy", function(d) { return y(d.death); })
					.attr("rx", 3.5) 
					.attr("ry", 3.5)
					.style("fill", "white") 
					.attr("stroke", 'steelblue') */
         
			
</script>
				
</body>
</html>